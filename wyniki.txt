wynik analizy algorytmu alpha-beta dla gry w monety:
====================================================
wizualizacja drzewa przeszukiwania (kolejność wezłów i zmian alpha/beta):
Stan początkowy: 5
Ruch 1 w korzeniu: stan 4
  MIN (state=4) (alpha=-100, beta=100)
  Ruch 1: stan 3
    MAX (state=3) (alpha=-100, beta=100)
   Ruch 1: stan 2
      MIN (state=2) (alpha=-100, beta=100)
    Ruch 1: zostaje jedna moneta -> wartość -100
    Ruch 1: aktualizacja beta = min: (100, -100) -> -100
    Przyciecie kolejnego ruchu 1: ponieważ alpha = -100 >= beta = -100
   MIN (state=2) zwracam -100
   Ruch 1: wartość -100
   Ruch 1: aktualizacja alpha = max: (-100, -100) -> -100
   Ruch 2: zostaje jedna moneta -> wartość 100
   Ruch 2: aktualizacja alpha = max: (-100, 100) -> 100
   Przyciecie kolejnego ruchu 2: ponieważ alpha = 100 >= beta = 100
  MAX (state=3) zwracam 100
  Ruch 1: wartość 100
  Ruch 1: aktualizacja beta = min: (100, 100) -> 100
  Ruch 2: stan 2
    MAX (state=2) (alpha=-100, beta=100)
   Ruch 1: zostaje jedna moneta -> wartość 100
   Ruch 1: aktualizacja alpha = max: (-100, 100) -> 100
   Przyciecie kolejnego ruchu 1: ponieważ alpha = 100 >= beta = 100
  MAX (state=2) zwracam 100
  Ruch 2: wartość 100
  Ruch 2: aktualizacja beta = min: (100, 100) -> 100
  Ruch 3: zostaje jedna moneta -> wartość -100
  Ruch 3: aktualizacja beta = min: (100, -100) -> -100
  Przyciecie kolejnego ruchu 3: ponieważ alpha = -100 >= beta = -100
 MIN (state=4) zwracam -100
Ruch 1 w korzeniu: wartość -100
Ruch 2 w korzeniu: stan 3
  MIN (state=3) (alpha=-100, beta=100)
  Ruch 1: stan 2
    MAX (state=2) (alpha=-100, beta=100)
   Ruch 1: zostaje jedna moneta -> wartość 100
   Ruch 1: aktualizacja alpha = max: (-100, 100) -> 100
   Przyciecie kolejnego ruchu 1: ponieważ alpha = 100 >= beta = 100
  MAX (state=2) zwracam 100
  Ruch 1: wartość 100
  Ruch 1: aktualizacja beta = min: (100, 100) -> 100
  Ruch 2: zostaje jedna moneta -> wartość -100
  Ruch 2: aktualizacja beta = min: (100, -100) -> -100
  Przyciecie kolejnego ruchu 2: ponieważ alpha = -100 >= beta = -100
 MIN (state=3) zwracam -100
Ruch 2 w korzeniu: wartość -100
Ruch 3 w korzeniu: stan 2
  MIN (state=2) (alpha=-100, beta=100)
  Ruch 1: zostaje jedna moneta -> wartość -100
  Ruch 1: aktualizacja beta = min: (100, -100) -> -100
  Przyciecie kolejnego ruchu 1: ponieważ alpha = -100 >= beta = -100
 MIN (state=2) zwracam -100
Ruch 3 w korzeniu: wartość -100
====================================================
zdarzenia przycinania:
 - Przyciecie w MIN (state=2)po ruchu 1 (alpha=-100, beta=-100)
 - Przyciecie w MAX (state=3)po ruchu 2 (alpha=100, beta=100)
 - Przyciecie w MAX (state=2)po ruchu 1 (alpha=100, beta=100)
 - Przyciecie w MIN (state=4)po ruchu 3 (alpha=-100, beta=-100)
 - Przyciecie w MAX (state=2)po ruchu 1 (alpha=100, beta=100)
 - Przyciecie w MIN (state=3)po ruchu 2 (alpha=-100, beta=-100)
 - Przyciecie w MIN (state=2)po ruchu 1 (alpha=-100, beta=-100)
====================================================
liczba odwiedzonych wezłów: 7
ocena ruch w korzeniu:
 - ruch 1 (pobranie 1 monety): -100
 - ruch 2 (pobranie 2 monety): -100
 - ruch 3 (pobranie 3 monety): -100
====================================================
żaden ruch nie gwarantuje zwyciestwa, najlepszy ruch to pobranie: 1 monety,który minimalizuje porazkę. Pod warunkiem nierozsadnej gry gracza B.
